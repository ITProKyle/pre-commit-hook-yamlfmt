[tool.poetry]
name = "pre-commit-hook-yamlfmt"
version = "0.3.0"
authors = ["Kyle Finley <kyle@finley.sh>"]
description = "YAML formatter for http://pre-commit.com."
homepage = "https://github.com/ITProKyle/pre-commit-hook-yamlfmt"
keywords = ["pre-commit"]
license = "Apache-2.0"
packages = [
  {include = "pre_commit_hooks"},
]
readme = "README.md"
repository = "https://github.com/ITProKyle/pre-commit-hook-yamlfmt"

[tool.poetry.dependencies]
python = "^3.9"
click = "8.1.7"
"ruamel.yaml" = "0.18.6"

[tool.poetry.group.dev.dependencies]
pre-commit = "^4.0.1"

[tool.poetry.group.lint.dependencies]
black = "^24.10.0"
ruff = "^0.8.1"

[tool.poetry.scripts]
yamlfmt = "pre_commit_hooks.yamlfmt:cli"

[tool.black]
force-exclude = '''
/(
    \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | build
  | dist
)/
'''
include = '\.pyi?$'
line-length = 100
target-version = ["py310", "py311", "py312", "py39"]

[tool.coverage.report]
exclude_lines = [
  "@overload",
  "cov: ignore",  # standard exclude comment
  "if TYPE_CHECKING:",  # excluded blocks
  "if __name__ == .__main__.:",
  "raise AssertionError",  # defensive exceptions
  "raise NotImplementedError",
]
# fail_under = 90  # set a minimum coverage percentage
precision = 2
show_missing = true

[tool.pyright]
exclude = [
  "**/.eggs",
  "**/.git",
  "**/.runway",
  "**/.venv",
  "**/__pycache__",
  "**/docs",
  "**/node_modules",
  "**/typings",
]
pythonVersion = "3.9"
reportDuplicateImport = "none"
reportImportCycles = "none"
reportIncompatibleMethodOverride = "warning"
reportMissingTypeStubs = "warning"
reportPrivateUsage = "none"
reportUnknownMemberType = "none"
reportUnnecessaryIsInstance = "warning"
reportUnusedImport = "none"
reportUnusedVariable = "none"
reportWildcardImportFromLibrary = "none"
strictParameterNoneValue = false
typeCheckingMode = "strict"
useLibraryCodeForTypes = true
venv = ".venv"

[tool.pytest.ini_options]
addopts = [
  "--cov-config=pyproject.toml",
  "--no-cov-on-fail",
]
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::pytest_mock.PytestMockWarning",
]
markers = [
  "wip: isolate tests currently being worked on.",
]
python_classes = ["Test*"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
testpaths = ["tests"]

[tool.ruff]  # https://docs.astral.sh/ruff/settings/#top-level
force-exclude = true
line-length = 120
show-fixes = true
target-version = "py39"

[tool.ruff.lint]  # https://docs.astral.sh/ruff/settings/#lint
ignore = [
  "ANN101",  # Missing type annotation for `self` in method
  "ANN102",  # Missing type annotation for `cls` in classmethod
  "COM812",  # Trailing comma missing
  "D203",  # 1 blank line required before class docstring
  "D213",  # Multi-line docstring summary should start at the second line
  "D215",  # Section underline is over-indented
  "D403",  # First word of the first line should be capitalized
  "D406",  # Section name should end with a newline
  "D407",  # Missing dashed underline after section
  "D408",  # Section underline should be in the line following the section's name
  "D409",  # Section underline should match the length of its name
  "FIX002",  # Line contains TODO
  "TD003",  # Missing issue link on the line following this TODO
  "TID252",  # Relative imports from parent modules are banned
]
ignore-init-module-imports = true
select = ["ALL"]

[tool.ruff.lint.extend-per-file-ignores]  # https://docs.astral.sh/ruff/settings/#lintextend-per-file-ignores
"tests/*" = [
  "FBT001",  # Boolean positional arg in function definition - this is fine here
  "FBT003",  # Boolean positional value in function call - this is fine here
  "S101",  # Use of `assert` detected - this is fine here
  "S108",  # Probable insecure usage of temporary file or directory
  "SLF001",  # Private member accessed - fine in tests
]

[tool.ruff.lint.pydocstyle]  # https://docs.astral.sh/ruff/settings/#lintpydocstyle
convention = "google"

[tool.ruff.lint.pylint]  # https://docs.astral.sh/ruff/settings/#lintpylint
allow-magic-value-types = ["bytes", "int", "str"]

[tool.tomlsort]
all = true
in_place = true
sort_first = ["tool", "tool.poetry"]
spaces_before_inline_comment = 2
trailing_comma_inline_array = true
overrides."tool.poetry".first = ["name", "version"]
overrides."tool.poetry.dependencies".first = ["python"]

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.7"]
